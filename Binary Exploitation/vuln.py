#!/usr/bin/env python3

def main():
    # Prompt for the main address printed by the vulnerable binary.
    main_addr_str = input("Address of main: ").strip()
    try:
        main_addr = int(main_addr_str, 16)
    except ValueError:
        print("Invalid main address format!")
        return

    # Define the offset between main and win.
    # This offset should be computed from your local binary (e.g. using nm or readelf).
    # For this example, we assume the offset is 0x123.
    offset = 0x123
    expected_jump_addr = main_addr + offset

    # Prompt the user for the jump address.
    jump_addr_str = input("Enter the address to jump to, ex => 0x12345: ").strip()
    try:
        jump_addr = int(jump_addr_str, 16)
    except ValueError:
        print("Invalid jump address format!")
        return

    # Check if the provided jump address is correct.
    if jump_addr == expected_jump_addr:
        print("You won!")
        # Simulated flag output. In the real challenge this would print the flag contents.
        print("Flag: picoCTF{example_flag}")
    else:
        print("Segfault Occurred, incorrect address.")

if __name__ == "__main__":
    main()
